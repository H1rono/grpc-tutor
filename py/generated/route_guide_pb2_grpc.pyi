"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
https://github.com/grpc/grpc/blob/b8a04ac/examples/protos/route_guide.proto"""

import abc
import collections.abc
import generated.route_guide_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class RouteGuideStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetFeature: grpc.UnaryUnaryMultiCallable[
        generated.route_guide_pb2.Point,
        generated.route_guide_pb2.Feature,
    ]
    """obtains the feature at a given position."""

    ListFeatures: grpc.UnaryStreamMultiCallable[
        generated.route_guide_pb2.Rectangle,
        generated.route_guide_pb2.Feature,
    ]
    """Obtains the Features available within the given Rectangle.  Results are
    streamed rather than returned at once (e.g. in a response message with a
    repeated field), as the rectangle may cover a large area and contain a
    huge number of features.
    """

    RecordRoute: grpc.StreamUnaryMultiCallable[
        generated.route_guide_pb2.Point,
        generated.route_guide_pb2.RouteSummary,
    ]
    """Accepts a stream of Points on a route being traversed, returning a
    RouteSummary when traversal is completed.
    """

    RouteChat: grpc.StreamStreamMultiCallable[
        generated.route_guide_pb2.RouteNote,
        generated.route_guide_pb2.RouteNote,
    ]
    """Accepts a stream of RouteNotes sent while a route is being traversed,
    while receiving other RouteNotes (e.g. from other users).
    """

class RouteGuideAsyncStub:
    GetFeature: grpc.aio.UnaryUnaryMultiCallable[
        generated.route_guide_pb2.Point,
        generated.route_guide_pb2.Feature,
    ]
    """obtains the feature at a given position."""

    ListFeatures: grpc.aio.UnaryStreamMultiCallable[
        generated.route_guide_pb2.Rectangle,
        generated.route_guide_pb2.Feature,
    ]
    """Obtains the Features available within the given Rectangle.  Results are
    streamed rather than returned at once (e.g. in a response message with a
    repeated field), as the rectangle may cover a large area and contain a
    huge number of features.
    """

    RecordRoute: grpc.aio.StreamUnaryMultiCallable[
        generated.route_guide_pb2.Point,
        generated.route_guide_pb2.RouteSummary,
    ]
    """Accepts a stream of Points on a route being traversed, returning a
    RouteSummary when traversal is completed.
    """

    RouteChat: grpc.aio.StreamStreamMultiCallable[
        generated.route_guide_pb2.RouteNote,
        generated.route_guide_pb2.RouteNote,
    ]
    """Accepts a stream of RouteNotes sent while a route is being traversed,
    while receiving other RouteNotes (e.g. from other users).
    """

class RouteGuideServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetFeature(
        self,
        request: generated.route_guide_pb2.Point,
        context: _ServicerContext,
    ) -> typing.Union[generated.route_guide_pb2.Feature, collections.abc.Awaitable[generated.route_guide_pb2.Feature]]:
        """obtains the feature at a given position."""

    @abc.abstractmethod
    def ListFeatures(
        self,
        request: generated.route_guide_pb2.Rectangle,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[generated.route_guide_pb2.Feature], collections.abc.AsyncIterator[generated.route_guide_pb2.Feature]]:
        """Obtains the Features available within the given Rectangle.  Results are
        streamed rather than returned at once (e.g. in a response message with a
        repeated field), as the rectangle may cover a large area and contain a
        huge number of features.
        """

    @abc.abstractmethod
    def RecordRoute(
        self,
        request_iterator: _MaybeAsyncIterator[generated.route_guide_pb2.Point],
        context: _ServicerContext,
    ) -> typing.Union[generated.route_guide_pb2.RouteSummary, collections.abc.Awaitable[generated.route_guide_pb2.RouteSummary]]:
        """Accepts a stream of Points on a route being traversed, returning a
        RouteSummary when traversal is completed.
        """

    @abc.abstractmethod
    def RouteChat(
        self,
        request_iterator: _MaybeAsyncIterator[generated.route_guide_pb2.RouteNote],
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[generated.route_guide_pb2.RouteNote], collections.abc.AsyncIterator[generated.route_guide_pb2.RouteNote]]:
        """Accepts a stream of RouteNotes sent while a route is being traversed,
        while receiving other RouteNotes (e.g. from other users).
        """

def add_RouteGuideServicer_to_server(servicer: RouteGuideServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
